-- **GROUP BY**


-- 동명 동물 수 찾기 (LEVEL 2)
SELECT NAME, COUNT(NAME) AS "COUNT"
FROM ANIMAL_INS
WHERE NAME IS NOT NULL
GROUP BY NAME
HAVING COUNT(NAME) > 1
ORDER BY 1;


-- 고양이와 개는 몇 마리 있을까 (LEVEL 2)
SELECT ANIMAL_TYPE, COUNT(ANIMAL_TYPE) AS "COUNT"
FROM ANIMAL_INS
GROUP BY ANIMAL_TYPE
ORDER BY 1;


-- 고양이와 개는 몇 마리 있을까 (LEVEL 2)
SELECT ANIMAL_TYPE, COUNT(ANIMAL_TYPE) AS "COUNT"
FROM ANIMAL_INS
WHERE REGEXP_LIKE(ANIMAL_TYPE, 'Cat|Dog')
GROUP BY ANIMAL_TYPE
ORDER BY 1;


-- 진료과별 총 예약 횟수 출력하기 (LEVEL 2)
SELECT MCDP_CD AS "진료과코드", COUNT(MCDP_CD) AS "5월예약건수"
FROM APPOINTMENT
WHERE TO_CHAR(APNT_YMD, 'MM') = '05'
GROUP BY MCDP_CD
ORDER BY 2, 1;


-- 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기 (LEVEL 2)
SELECT CAR_TYPE, COUNT(*) AS "CARS"
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%시트%'
GROUP BY CAR_TYPE
ORDER BY 1;


-- 가격대 별 상품 개수 구하기 (LEVEL 2)
SELECT TRUNC(PRICE, -4) AS "PRICE_GROUP", COUNT(PRODUCT_ID) AS "PRODUCTS"
FROM PRODUCT
GROUP BY TRUNC(PRICE, -4)
ORDER BY 1;


-- 성분으로 구분한 아이스크림 총 주문량 (LEVEL 2)
SELECT INGREDIENT_TYPE, SUM(TOTAL_ORDER) AS "TOTAL_ORDER"
FROM FIRST_HALF
JOIN ICECREAM_INFO USING (FLAVOR)
GROUP BY INGREDIENT_TYPE
ORDER BY 2;


-- 입양 시각 구하기(1) (LEVEL 2)
SELECT TO_NUMBER(TO_CHAR(DATETIME, 'HH24')) AS "HOUR", COUNT(ANIMAL_ID) AS "COUNT"
FROM ANIMAL_OUTS
GROUP BY TO_NUMBER(TO_CHAR(DATETIME, 'HH24'))
HAVING TO_NUMBER(TO_CHAR(DATETIME, 'HH24')) BETWEEN 9 AND 19
ORDER BY 1;


-- 입양 시각 구하기(2) (LEVEL 4)
SELECT A.HOUR, COUNT(B.HOUR) AS "COUNT"
FROM (SELECT LEVEL - 1 AS HOUR FROM DUAL CONNECT BY LEVEL < 25) A
LEFT JOIN (SELECT TO_NUMBER(TO_CHAR(DATETIME, 'HH24')) AS "HOUR" FROM ANIMAL_OUTS) B ON (A.HOUR = B.HOUR)
GROUP BY A.HOUR
ORDER BY 1;


-- 즐겨찾기가 가장 많은 식당 정보 출력하기 (LEVEL 3)
SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES
FROM REST_INFO
WHERE (FOOD_TYPE, FAVORITES) 
IN (SELECT FOOD_TYPE, MAX(FAVORITES)
    FROM REST_INFO
    GROUP BY FOOD_TYPE)
ORDER BY 1 DESC;


-- 즐겨찾기가 가장 많은 식당 정보 출력하기 (LEVEL 3)
SELECT B.FOOD_TYPE, B.REST_ID, B.REST_NAME, B.FAVORITES
FROM (SELECT FOOD_TYPE, MAX(FAVORITES) FAVORITES
      FROM REST_INFO
      GROUP BY FOOD_TYPE) A, REST_INFO B
WHERE A.FOOD_TYPE = B.FOOD_TYPE
AND A.FAVORITES = B.FAVORITES
ORDER BY 1 DESC;


-- 즐겨찾기가 가장 많은 식당 정보 출력하기 (GPT) (LEVEL 3)
SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES
FROM (SELECT FOOD_TYPE, REST_ID, REST_NAME, FAVORITES, ROW_NUMBER() OVER (PARTITION BY FOOD_TYPE ORDER BY FAVORITES DESC) AS rnk
      FROM REST_INFO)
WHERE rnk = 1
ORDER BY 1 DESC;


-- 자동차 대여 기록에서 대여중 / 대여 가능 여부 구분하기 (LEVEL 3)
SELECT CAR_ID, 
  CASE WHEN RENT = 0 THEN '대여 가능' 
       ELSE '대여중' 
       END AS AVAILABILITY
 FROM (SELECT CAR_ID, 
              SUM(CASE WHEN TO_DATE('2022-10-16', 'YYYY-MM-DD') 
              BETWEEN START_DATE AND END_DATE THEN 1 ELSE 0 END) AS RENT
         FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
        GROUP BY CAR_ID
       )
 ORDER BY 1 DESC;

SELECT HISTORY_ID, CAR_ID, START_DATE, END_DATE,
CASE WHEN TO_DATE('2022-10-16', 'YYYY-MM-DD') 
BETWEEN START_DATE AND END_DATE THEN 1 ELSE 0 END AS RENT
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
ORDER BY CAR_ID DESC;


-- 조건에 맞는 사용자와 총 거래금액 조회하기 (LEVEL 3)
SELECT USER_ID, NICKNAME, SUM(PRICE) AS TOTAL_SALES
FROM (SELECT *
     FROM USED_GOODS_BOARD
     WHERE STATUS = 'DONE')
JOIN USED_GOODS_USER ON (WRITER_ID = USER_ID)
GROUP BY USER_ID, NICKNAME
HAVING SUM(PRICE) >= 700000
ORDER BY 3;

SELECT USER_ID, NICKNAME, TOTAL_SALES
FROM USED_GOODS_USER A 
JOIN (SELECT WRITER_ID, SUM(PRICE) AS TOTAL_SALES
     FROM USED_GOODS_BOARD
     WHERE STATUS = 'DONE'
     GROUP BY WRITER_ID) B
ON WRITER_ID = USER_ID
WHERE TOTAL_SALES >= 700000
ORDER BY TOTAL_SALES ASC;


-- 카테고리 별 도서 판매량 집계하기 (LEVEL 3)
SELECT CATEGORY, SUM(SALES) AS TOTAL_SALES
FROM BOOK
JOIN (SELECT * 
      FROM BOOK_SALES
      WHERE TO_CHAR(SALES_DATE, 'YYYY-MM') = '2022-01')
USING (BOOK_ID)
GROUP BY CATEGORY
ORDER BY 1;

SELECT CATEGORY, SUM(SALES) AS TOTAL_SALES
FROM BOOK B, BOOK_SALES I
WHERE B.BOOK_ID = I.BOOK_ID
AND TO_CHAR(SALES_DATE, 'YYYY-MM') = '2022-01'
GROUP BY CATEGORY
ORDER BY 1;

SELECT B.CATEGORY, SUM(I.SALES)
FROM BOOK_SALES I, BOOK B
WHERE B.BOOK_ID = I.BOOK_ID
AND TO_CHAR(SALES_DATE, 'MM') = '01'
GROUP BY B.CATEGORY
ORDER BY B.CATEGORY


-- 대여 횟수가 많은 자동차들의 월별 대여 횟수 구하기 (LEVEL 3)
SELECT EXTRACT(MONTH FROM START_DATE) AS MONTH, CAR_ID, COUNT(*) AS RECORDS
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
WHERE CAR_ID 
IN (SELECT CAR_ID
    FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
    WHERE START_DATE BETWEEN TO_DATE('2022-08-01', 'YYYY-MM-DD') AND TO_DATE('2022-10-31', 'YYYY-MM-DD')
    GROUP BY CAR_ID
    HAVING COUNT(*) >= 5)
AND START_DATE BETWEEN TO_DATE('2022-08-01', 'YYYY-MM-DD') AND TO_DATE('2022-10-31', 'YYYY-MM-DD')
GROUP BY EXTRACT(MONTH FROM START_DATE), CAR_ID
HAVING COUNT(*) > 0
ORDER BY 1, 2 DESC;