-- **SELECT**


-- 동물의 아이디와 이름 (LEVEL 1)
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
ORDER BY 1;


-- 3월에 태어난 여성 회원 목록 출력하기 (LEVEL 2)
SELECT MEMBER_ID, MEMBER_NAME, GENDER, TO_CHAR(DATE_OF_BIRTH, 'YYYY-MM-DD') AS "DATE_OF_BIRTH"
FROM MEMBER_PROFILE
WHERE GENDER = 'W' AND TLNO IS NOT NULL AND TO_CHAR(DATE_OF_BIRTH, 'MM') = 3
ORDER BY 1;


-- 12세 이하인 여자 환자 목록 출력하기 (LEVEL 1)
SELECT PT_NAME, PT_NO, GEND_CD, AGE, NVL(TLNO, 'NONE') AS "TLNO"
FROM PATIENT
WHERE GEND_CD = 'W' AND AGE <= 12
ORDER BY AGE DESC, 1;


-- 조건에 부합하는 중고거래 댓글 조회하기 (LEVEL 1)
SELECT B.TITLE, B.BOARD_ID, R.REPLY_ID, R.WRITER_ID, R.CONTENTS, TO_CHAR(R.CREATED_DATE, 'YYYY-MM-DD') AS "CREATED_DATE"
FROM USED_GOODS_BOARD B
JOIN USED_GOODS_REPLY R ON (B.BOARD_ID = R.BOARD_ID)
WHERE TO_CHAR(B.CREATED_DATE, 'YYYYMM') = '202210'
ORDER BY R.CREATED_DATE, B.TITLE;


-- 재구매가 일어난 상품과 회원 리스트 구하기 (LEVEL 2)
SELECT USER_ID, PRODUCT_ID
FROM ONLINE_SALE
GROUP BY USER_ID, PRODUCT_ID
HAVING COUNT(PRODUCT_ID) > 1
ORDER BY 1, 2 DESC;


-- 오프라인/온라인 판매 데이터 통합하기 (LEVEL 4)
SELECT TO_CHAR(SALES_DATE, 'YYYY-MM-DD') AS "SALES_DATE", PRODUCT_ID, USER_ID, SALES_AMOUNT
FROM(SELECT SALES_DATE, PRODUCT_ID, USER_ID, SALES_AMOUNT
     FROM ONLINE_SALE
     WHERE TO_CHAR(SALES_DATE, 'MM') = '03'
    UNION
     SELECT SALES_DATE, PRODUCT_ID, NULL, SALES_AMOUNT
     FROM OFFLINE_SALE
     WHERE TO_CHAR(SALES_DATE, 'MM') = '03')
ORDER BY 1, 2, 3;


-- 평균 일일 대여 요금 구하기 (LEVEL 1)
SELECT ROUND(AVG(DAILY_FEE), 0) AS "AVERAGE_FEE"
FROM CAR_RENTAL_COMPANY_CAR
WHERE CAR_TYPE = 'SUV';


-- 인기있는 아이스크림 (LEVEL 1)
SELECT FLAVOR
FROM (SELECT *
      FROM FIRST_HALF
      ORDER BY 3 DESC, 1);


-- 조건에 맞는 도서 리스트 출력하기 (LEVEL 1)
SELECT BOOK_ID, TO_CHAR(PUBLISHED_DATE, 'YYYY-MM-DD') AS "PUBLISHED_DATE"
FROM BOOK
WHERE TO_CHAR(PUBLISHED_DATE, 'YYYY') = '2021' AND CATEGORY = '인문'
ORDER BY 2;


-- 과일로 만든 아이스크림 고르기 (LEVEL 1)
SELECT FLAVOR
FROM FIRST_HALF
JOIN ICECREAM_INFO USING (FLAVOR)
WHERE TOTAL_ORDER > 3000 AND INGREDIENT_TYPE = 'fruit_based'
ORDER BY TOTAL_ORDER DESC;


-- 서울에 위치한 식당 목록 출력하기 (LEVEL 4)
SELECT A.REST_ID, A.REST_NAME, A.FOOD_TYPE, A.FAVORITES, A.ADDRESS, ROUND(AVG(B.REVIEW_SCORE), 2) AS "SCORE"
FROM REST_INFO A
JOIN REST_REVIEW B ON (A.REST_ID = B.REST_ID)
GROUP BY A.REST_ID, A.REST_NAME, A.FOOD_TYPE, A.FAVORITES, A.ADDRESS
HAVING A.ADDRESS LIKE ('서울%')
ORDER BY 6 DESC, 4 DESC;


-- 흉부외과 또는 일반외과 의사 목록 출력하기 (LEVEL 1)
SELECT DR_NAME, DR_ID, MCDP_CD, TO_CHAR(HIRE_YMD, 'YYYY-MM-DD') AS "HIRE_DATE"
FROM DOCTOR
WHERE MCDP_CD = 'CS' OR MCDP_CD = 'GS'
ORDER BY 4 DESC, 1;


-- 강원도에 위치한 생산공장 목록 출력하기 (LEVEL 1)
SELECT FACTORY_ID, FACTORY_NAME, ADDRESS
FROM FOOD_FACTORY
WHERE ADDRESS LIKE '강원%'
ORDER BY 1;


-- 모든 레코드 조회하기 (LEVEL 1)
SELECT *
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;


-- 역순 정렬하기 (LEVEL 1)
SELECT NAME, DATETIME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID DESC;


-- 아픈 동물 찾기 (LEVEL 1)
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE INTAKE_CONDITION = 'Sick'
ORDER BY 1;


-- 어린 동물 찾기 (LEVEL 1)
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE INTAKE_CONDITION != 'Aged'
ORDER BY 1;


-- 여러 기준으로 정렬하기 (LEVEL 1)
SELECT ANIMAL_ID, NAME, DATETIME
FROM ANIMAL_INS
ORDER BY 2, 3 DESC;


-- 상위 n개 레코드 (LEVEL 1)
SELECT NAME
FROM (SELECT *
     FROM ANIMAL_INS
     ORDER BY DATETIME)
WHERE ROWNUM = 1;


-- 조건에 맞는 회원수 구하기 (LEVEL 1)
SELECT COUNT(USER_ID) AS "USERS"
FROM USER_INFO
WHERE TO_CHAR(JOINED, 'YYYY') = 2021 AND (AGE BETWEEN 20 AND 29);
