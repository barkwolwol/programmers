-- **JOIN**

-- 조건에 맞는 도서와 저자 리스트 출력하기 (LEVEL 2)
SELECT BOOK_ID, AUTHOR_NAME, TO_CHAR(PUBLISHED_DATE, 'YYYY-MM-DD') AS PUBLISHED_DATE
FROM BOOK
JOIN AUTHOR USING (AUTHOR_ID)
WHERE CATEGORY = '경제'
ORDER BY 3;


-- 상품 별 오프라인 매출 구하기 (LEVEL 2)
SELECT PRODUCT_CODE, SUM(PRICE * SALES_AMOUNT) AS SALES
FROM PRODUCT
JOIN OFFLINE_SALE USING (PRODUCT_ID)
GROUP BY PRODUCT_CODE
ORDER BY 2 DESC, 1;


-- 없어진 기록 찾기 (LEVEL 3)
SELECT O.ANIMAL_ID, O.NAME
FROM ANIMAL_OUTS O
LEFT JOIN ANIMAL_INS I ON (I.ANIMAL_ID = O.ANIMAL_ID)
WHERE I.DATETIME IS NULL
ORDER BY 1;

SELECT ANIMAL_ID, NAME
FROM ANIMAL_OUTS A
WHERE NOT EXISTS (SELECT 1 FROM ANIMAL_INS WHERE ANIMAL_ID = A.ANIMAL_ID)
ORDER BY 1;


-- 있었는데요 없었습니다 (LEVEL 3)
SELECT I.ANIMAL_ID, I.NAME
FROM ANIMAL_INS I
JOIN ANIMAL_OUTS O ON (I.ANIMAL_ID = O.ANIMAL_ID)
WHERE I.DATETIME > O.DATETIME
ORDER BY I.DATETIME;


-- 오랜 기간 보호한 동물(1) (LEVEL 3)
SELECT I.NAME, I.DATETIME
FROM ANIMAL_INS I
LEFT JOIN ANIMAL_OUTS O ON (I.ANIMAL_ID = O.ANIMAL_ID)
WHERE O.ANIMAL_ID IS NULL
ORDER BY 2
FETCH FIRST 3 ROWS ONLY;

SELECT *
FROM (
    SELECT I.NAME, I.DATETIME
    FROM ANIMAL_INS I
    LEFT JOIN ANIMAL_OUTS O ON (I.ANIMAL_ID = O.ANIMAL_ID)
    WHERE O.ANIMAL_ID IS NULL
    ORDER BY 2
)
WHERE ROWNUM <= 3;


-- 주문량이 많은 아이스크림들 조회하기 (LEVEL 4)
SELECT F.FLAVOR
FROM FIRST_HALF F
JOIN JULY J ON (F.FLAVOR = J.FLAVOR)
GROUP BY F.FLAVOR
ORDER BY SUM(F.TOTAL_ORDER) + SUM(J.TOTAL_ORDER) DESC
FETCH FIRST 3 ROWS ONLY;

SELECT *
FROM (
    SELECT F.FLAVOR
    FROM FIRST_HALF F
    JOIN JULY J ON (F.FLAVOR = J.FLAVOR)
    GROUP BY F.FLAVOR
    ORDER BY SUM(F.TOTAL_ORDER) + SUM(J.TOTAL_ORDER) DESC
)
WHERE ROWNUM <= 3;

SELECT FLAVOR
FROM (
    SELECT F.FLAVOR, SUM(F.TOTAL_ORDER) + SUM(J.TOTAL_ORDER)
    FROM FIRST_HALF F
    JOIN JULY J ON (F.FLAVOR = J.FLAVOR)
    GROUP BY F.FLAVOR
    ORDER BY 2 DESC
)
WHERE ROWNUM <= 3;


-- 특정 기간동안 대여 가능한 자동차들의 대여비용 구하기 (LEVEL 4)
SELECT *
FROM (
    SELECT CAR_ID, CAR_TYPE, (DAILY_FEE * 30 * (100 - DISCOUNT_RATE) / 100) AS FEE
    FROM CAR_RENTAL_COMPANY_CAR
    JOIN CAR_RENTAL_COMPANY_DISCOUNT_PLAN USING (CAR_TYPE)
    WHERE DURATION_TYPE LIKE ('30%') AND CAR_TYPE IN ('세단', 'SUV')
)
WHERE CAR_ID NOT IN (
    SELECT CAR_ID
    FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY 
    WHERE START_DATE < TO_DATE('2022-12-01', 'YYYY-MM-DD')
    AND END_DATE > TO_DATE('2022-10-31', 'YYYY-MM-DD')
    -- WHERE TO_CHAR(START_DATE, 'YYYY-MM-DD') < '2022-12-01'
    -- AND TO_CHAR(END_DATE, 'YYYY-MM-DD') >'2022-10-31'
)
AND FEE >= 500000 AND FEE < 2000000
ORDER BY 3 DESC, 2, 1 DESC


-- 5월 식품들의 총매출 조회하기 (LEVEL 4) 
SELECT PRODUCT_ID, PRODUCT_NAME, PRICE * AMOUNT AS TOTAL_SALES
FROM (
    SELECT PRODUCT_ID, PRODUCT_NAME, PRICE, SUM(AMOUNT) AS AMOUNT
    FROM FOOD_PRODUCT
    JOIN FOOD_ORDER USING (PRODUCT_ID)
    WHERE TO_CHAR(PRODUCE_DATE, 'MM') = 5
    GROUP BY PRODUCT_ID, PRODUCT_NAME, PRICE
)
ORDER BY 3 DESC, 1;

SELECT PRODUCT_ID, PRODUCT_NAME, SUM(PRICE * AMOUNT) AS TOTAL_SALES
FROM FOOD_PRODUCT 
JOIN FOOD_ORDER USING (PRODUCT_ID)
WHERE TO_CHAR(PRODUCE_DATE, 'MM') = '05'
GROUP BY PRODUCT_ID, PRODUCT_NAME
ORDER BY 3 DESC, 1;


-- 그룹별 조건에 맞는 식당 목록 출력하기 (LEVEL 4)
SELECT MEMBER_NAME, REVIEW_TEXT, TO_CHAR(REVIEW_DATE,'YYYY-MM-DD') AS REVIEW_DATE
FROM MEMBER_PROFILE
JOIN REST_REVIEW USING (MEMBER_ID)
WHERE MEMBER_ID IN (
    SELECT MEMBER_ID 
    FROM (
        SELECT MEMBER_ID, RANK() OVER(ORDER BY COUNT(MEMBER_ID) DESC) AS RANK 
        FROM REST_REVIEW 
        GROUP BY MEMBER_ID 
        ) 
    WHERE RANK = 1)
ORDER BY 3, 2;


-- 보호소에서 중성화한 동물 (LEVEL 4)
SELECT O.ANIMAL_ID, O.ANIMAL_TYPE, O.NAME
FROM ANIMAL_OUTS O
JOIN (
    SELECT *
    FROM ANIMAL_INS
    WHERE SEX_UPON_INTAKE LIKE ('Intact%')
) I ON (O.ANIMAL_ID = I.ANIMAL_ID)
WHERE O.SEX_UPON_OUTCOME LIKE ('Spayed%') OR O.SEX_UPON_OUTCOME LIKE ('Neutered%')
ORDER BY 1;

SELECT O.ANIMAL_ID, O.ANIMAL_TYPE, O.NAME
FROM ANIMAL_OUTS O
JOIN ANIMAL_INS I ON (O.ANIMAL_ID = I.ANIMAL_ID)
WHERE SEX_UPON_INTAKE LIKE ('Intact%')
AND SEX_UPON_OUTCOME NOT LIKE ('Intact%')
ORDER BY 1;


-- 상품을 구매한 회원 비율 구하기 (LEVEL 5)
-- 2021년 가입한 유저수 158명
SELECT COUNT(I.USER_ID)
FROM USER_INFO I 
WHERE EXTRACT(YEAR FROM JOINED) = 2021
ORDER BY 1;

-- 2021년 월별 가입한 유저수
-- 2021	6	20
-- 2021	7	23
-- 2021	8	26
-- 2021	9	19
-- 2021	10	27
-- 2021	11	21
-- 2021	12	22
SELECT EXTRACT(YEAR FROM JOINED) AS YEAR,
EXTRACT(MONTH FROM JOINED) AS MONTH,
COUNT(I.USER_ID)
FROM USER_INFO I 
WHERE EXTRACT(YEAR FROM JOINED) = 2021
GROUP BY EXTRACT(YEAR FROM JOINED), EXTRACT(MONTH FROM JOINED)
ORDER BY 1, 2;

-- 2021년 가입한 유저 중 상품을 구매한 유저수 111명
SELECT COUNT(I.USER_ID)
FROM USER_INFO I 
JOIN ONLINE_SALE S ON (I.USER_ID = S.USER_ID)
WHERE EXTRACT(YEAR FROM JOINED) = 2021
ORDER BY 1;

-- 2021년 가입한 유저 중 월별 상품을 구매한 유저수
-- 2022	1	47
-- 2022	2	40
-- 2022	3	6
SELECT EXTRACT(YEAR FROM SALES_DATE) AS YEAR,
EXTRACT(MONTH FROM SALES_DATE) AS MONTH,
COUNT(DISTINCT I.USER_ID)
FROM USER_INFO I 
JOIN ONLINE_SALE S ON (I.USER_ID = S.USER_ID)
WHERE EXTRACT(YEAR FROM JOINED) = 2021
GROUP BY EXTRACT(YEAR FROM SALES_DATE), EXTRACT(MONTH FROM SALES_DATE)
ORDER BY 1, 2;

-- 월별 구매 회원수 / 2021년 전체 가입자수
-- 1월 47 / 158
-- 2월 40 / 158
-- 3월 6 / 158
ROUND(COUNT(DISTINCT(I.USER_ID)) / (SELECT COUNT(DISTINCT(USER_ID)) FROM USER_INFO WHERE EXTRACT(YEAR FROM JOINED) = 2021), 1) AS PUCHASED_RATIO

-- 최종 쿼리
SELECT EXTRACT(YEAR FROM SALES_DATE) AS YEAR, 
       EXTRACT(MONTH FROM SALES_DATE) AS MONTH, 
       COUNT(DISTINCT I.USER_ID) AS PUCHASED_USERS, 
       ROUND(COUNT(DISTINCT(I.USER_ID)) / (SELECT COUNT(USER_ID) FROM USER_INFO WHERE EXTRACT(YEAR FROM JOINED) = 2021), 1) AS PUCHASED_RATIO     
  FROM USER_INFO I 
  JOIN ONLINE_SALE S ON (I.USER_ID = S.USER_ID)
 WHERE EXTRACT(YEAR FROM JOINED) = 2021
 GROUP BY EXTRACT(YEAR FROM SALES_DATE), EXTRACT(MONTH FROM SALES_DATE)
 ORDER BY 1, 2;